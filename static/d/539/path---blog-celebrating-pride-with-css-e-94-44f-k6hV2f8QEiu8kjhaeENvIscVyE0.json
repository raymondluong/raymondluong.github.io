{"data":{"site":{"siteMetadata":{"title":"Blog by Raymond Luong","subtitle":"Software Engineer in San Francisco","author":{"name":"Raymond Luong","twitter":"luongraymond"},"disqusShortname":"","url":"https://www.raymondluong.com/"}},"markdownRemark":{"id":"722604e9-485f-5a23-b755-dd93ba8b8f63","html":"<p>insert image</p>\n<p>With Pride month approaching, I want to see if I can add some pizzazz to Hippo, one of the main products I work on at Gusto. Our operations teams use Hippo internally to manage the benefits information for our customers. Each customer is represented as a company in our system and has a corresponding display page. Next to the company’s name, we display list of labels for each state that the company is in. My goal is to turn these drab state labels into a colorful rainbow.</p>\n<p>Here’s what it currently looks like.</p>\n<p>insert image</p>\n<p>My first thought is to add CSS helper classes for the different colors and use Ruby to determine when to apply each class. We currently use a Rails view with embedded ruby for the state labels. Here’s a code snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> states<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>state<span class=\"token operator\">|</span> <span class=\"token string\">%>\n  &lt;span class=\"label label-info state\"></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">=</span> state <span class=\"token string\">%>&lt;/span></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">end</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span></code></pre></div>\n<p>We have our <code class=\"language-text\">states</code> variable which is an array of states, e.g. [‘CA’, ‘NJ’, NY’]. We loop through each state to display a span element with the label, label-info, and state classes and the state name inside the element.</p>\n<p>Let’s say we have the following CSS helper classes. Note that I’m using SASS variables (denoted by the <code class=\"language-text\">$</code>) for readability, but any color value or hex code will work.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.red</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $red <span class=\"token punctuation\">}</span><span class=\"token selector\">;\n.orange</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $orange <span class=\"token punctuation\">}</span><span class=\"token selector\">;\n.yellow</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $yellow <span class=\"token punctuation\">}</span><span class=\"token selector\">;\n.green</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $green <span class=\"token punctuation\">}</span><span class=\"token selector\">;\n.blue</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $blue <span class=\"token punctuation\">}</span><span class=\"token selector\">;\n.indigo</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $indigo <span class=\"token punctuation\">}</span><span class=\"token selector\">;\n.violet</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $violet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ruby has a method called <code class=\"language-text\">each_with_index</code> that gives us the index of the element as the second parameter of the block. It looks like we can use the index to determine the class. For example, an index of 1 would be red, an index of 2 would be orange, and so on.</p>\n<div class=\"gatsby-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> states<span class=\"token punctuation\">.</span>each_with_index <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>state<span class=\"token punctuation\">,</span> index<span class=\"token operator\">|</span> <span class=\"token string\">%>\n\t# logic here based on the index\n  &lt;span class=\"label label-info state\"></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>freeze <span class=\"token string\">%>&lt;/span></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">end</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span></code></pre></div>\n<p>Functionally this would work, but the more I went down this approach the more I disliked it. It feels a bit heavy handed.</p>\n<p>Fortunately, we can accomplish this rainbow <strong>entirely with CSS</strong>. </p>\n<p>I remember something about an nth-child selector available in CSS3 that allows adding styling to a specific numbered child, e.g. the third child. In other words, this can be accomplished <em>entirely with CSS</em>. </p>\n<p>Let’s try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.state:nth-child(1n)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $red <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(2n)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $orange <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(3n)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $yellow <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(4n)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $green <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(5n)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $blue <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(6n)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $indigo <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(7n)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $violet <span class=\"token punctuation\">}</span></code></pre></div>\n<p>After refreshing the page, we get this:</p>\n<img>\n<p>It looks like the seven state labels are a rainbow. Great, that was straightforward!</p>\n<p>To sanity check, let’s test on a company with more than 7 states.</p>\n<img>\n<p>Hmmm, not quite right. It starts off as a rainbow but quickly diverges.</p>\n<p>I’ll pause here and give you a chance to see if you can spot the bug in my code.</p>\n<p>The colors rendered are:</p>\n<ol>\n<li>Red</li>\n<li>Orange</li>\n<li>Yellow</li>\n<li>Green</li>\n<li>Blue</li>\n<li>Indigo</li>\n<li>Violet</li>\n<li>Green</li>\n<li>Yellow</li>\n<li>Blue</li>\n</ol>\n<p>Looks like I misinterpreted what n actually means. The pattern passed into nth-child applies to every element whose position matches that pattern. For example, 3n effectively means every third element. </p>\n<p>How are the colors for this 10-state list determined? The first seven work as expected. The eighth element, the n, 2n and 4n rules apply to it, but the 4n rule was later in the CSS file so it wins the specificity test. The ninth and tenth element follow a similar pattern where multiple rules apply but the latest rule wins.</p>\n<p>Let’s try this again, this time reading the documentation. The nth-child selector accepts an expression of An+B where A is the length of the repeating pattern and B is a shift in the pattern. For our rainbow, we have a repeating pattern of seven colors, so A = 7. DOM elements are 1-indexed so B = 1 for the first color, B = 2 for the second color, and so on.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.state:nth-child(7n+1)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $red <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(7n+2)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $orange <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(7n+3)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $yellow <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(7n+4)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $green <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(7n+5)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $blue <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(7n+6)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $indigo <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.state:nth-child(7n+7)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> $violet <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The final result:</p>\n<img>\n<p>Happy Pride!</p>","fields":{"tagSlugs":["/tags/css/"]},"frontmatter":{"title":"Celebrating Pride with CSS","tags":["CSS"],"date":"2019-05-23","description":"Let's make a rainbow"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/celebrating-pride-with-css/"}}