{"data":{"site":{"siteMetadata":{"title":"Blog by Raymond Luong","subtitle":"Software Engineer in San Francisco","author":{"name":"Raymond Luong","twitter":"luongraymond"},"disqusShortname":"","url":"https://www.raymondluong.com/"}},"markdownRemark":{"id":"4325f427-fdd1-55fe-99a5-08a692e3743e","html":"<p>One of the most exciting parts about working with JavaScript and front-end development is the fast-paced nature of the industry. New patterns and standards evolve over time. However, keeping up with the changes can be complex and time-consuming because they may involve large-scale changes or refactors that are a bit more involved than a simple find-and-replace. </p>\n<p>Fortunately, codemods are a handy tool that help us automate these refactors. In this article, I’ll share more about codemods, walk through a simple codemod that I wrote, and share some tips for debugging.</p>\n<h1>What are codemods?</h1>\n<p>Codemods are scripts that automate a code change. They’re usually comprised of two parts:</p>\n<ol>\n<li>The first part is to find all instances of code to be changed, most easily accomplished with some form of pattern matching.</li>\n<li>The second part is to apply a transformation to each instance, usually based on the original instance but with some modifications. </li>\n</ol>\n<h1>When can I use codemods?</h1>\n<p>I mentioned large-scale refactors earlier — these can happen when upgrading versions of packages where existing methods are deprecated or new methods are introduced. They can also be used for syntax improvements or linting fixes. For example, in my current role at Gusto, we’ve used codemods to fix ESLint errors and move off deprecated React features.</p>\n<h1>How do I write one?</h1>\n<p>To help explain how to write a codemod, I’ll walk through an example I wrote to fix an ESLint error. I assume a basic understanding of JavaScript and React and tree data structures (wording). I’ll also talk about ASTs (Abstract Syntax Trees) but prior knowledge is not a prerequisite. </p>\n<h2>Context</h2>\n<p>At Gusto, we added ESLint to our codebase after we had already written a bunch of React components. Some of our existing components did not match the ESLint rules that we decided to enforce, but rather than having those errors block us from adding ESLint, we decided to suppress the existing errors and add ESLint so it could immediately start having value for our new code going forward. One of the errors we suppressed is <code class=\"language-text\">react/destructuring-assignment</code>. This ESLint rule prefers using JavaScript ES6 destructuring syntax when possible. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const { mailingAddress: address } = this.props;</code></pre></div>\n<p>is preferred to</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const address = this.props.mailingAddress;</code></pre></div>\n<p>There are a bunch of components in our codebase that do not destructure and have the destructuring-assignment rule suppressed. I’ll walk through a codemod I wrote to address the specific case above. Note that the example above doesn’t cover <em>all</em> the violations of the destructuring-assignment rule. When writing codemods, I’ve found that it’s simplest to start with the basic cases and gradually add on more complex cases.</p>\n<h3>Step 0: Boilerplate code</h3>\n<p>The jscodeshift package allows us to write codemods for JavaScript. To get started, we can use the following boilerplate code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = function(file, api) {\n  const j = api.jscodeshift;\n  const root = j(file.source);\n\n  // Step 1: Find all instances of the code to change\n  const instances = root.find(…);\n\n  // Step 2: Apply a code transformation and replace the code\n  instances.forEach(instance =&gt; {\n    j(path).replaceWith(…);\n  });\n  return root.toSource();\n}</code></pre></div>\n<p>Step 1: Find all instances of the code to change\nTo accomplish this, we’ll use pattern matching with AST (abstract syntax tree). The main idea is that code can be represented as a tree where each syntactic pattern is represented as a node, perhaps as a subtree of other nodes or with its own children nodes. There is a handy website called AST Explorer that we can use to visualize code as an AST. Let’s see what the AST structure looks like for our example code snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const address = this.props.mailingAddress;</code></pre></div>\n<p>&#x3C; TODO: screenshot ></p>\n<p>The overall expression is a VariableDeclaration has a kind of <code class=\"language-text\">const</code> since we declared the variable with <code class=\"language-text\">const</code> and a single VariableDeclarator for everything after the const keyword. This VariableDeclarator in turn has two children: the id which is an Identifier for the name of the variable, in this case address, and the init or how the variable is initialized, in this case it’s a MemberExpression that has its own subtree.</p>\n<p>&#x3C; TODO: screenshot ></p>\n<p>Breaking down the MemberExpression further, we can see that it’s comprised of another MemberExpression to capture <code class=\"language-text\">this.props</code> and a property to capture <code class=\"language-text\">mailingAddress</code>. The child MemberExpression of <code class=\"language-text\">this.props</code> can be broken down even further into a ThisExpression for the <code class=\"language-text\">this</code> keyword and a property with the name <code class=\"language-text\">props</code>. </p>\n<p>We can use the jscodeshift<code class=\"language-text\">find</code> method and pass in a pattern based on what we see in the AST explorer. Here’s what that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  const instances = root.find(j.VariableDeclarator, {\n    id: {\n      type: &#39;Identifier&#39;,\n    },\n    init: {\n      object: {\n        type: &#39;MemberExpression&#39;,\n        object: {\n          type: &#39;ThisExpression&#39;,\n        },\n        property: {\n          name: &#39;props&#39;,\n        },\n      },\n      property: {\n        type: &#39;Identifier&#39;,\n      },\n    },\n  });</code></pre></div>\n<p>At this point, it’s good to sanity check that our find works as expected. To do so, I like to test the codemod on one file. Let’s say we have the following example component that does a bunch of things, including render the address from the props:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ExampleComponent extends React.Component {\n  // other interesting behavior\n  render() {\n    const address = this.props.mailingAddress;\n    return (\n      &lt;&gt;\n        // render other components\n        &lt;AddressDisplay address={address} /&gt;\n      &lt;/&gt;\n    );\n  }\n}</code></pre></div>\n<p>We can run our codemod and add some console log statements to ensure that it’s finding the correct lines.</p>\n<p>To run the codemod, you’ll need the jscodeshift CLI. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> jscodeshift -t ~/path/to/codemod.js ~/path/to/component.jsx</code></pre></div>\n<p>-t specifies to transform the code.</p>\n<p>Adding console logs:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(declarations.length) // outputs 1</code></pre></div>\n<p>Not convinced? We can dig into each declaration and console log some of the properties</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(declarations[0].get(‘id’).node.name; // outputs address, TODO: double check this</code></pre></div>\n<p>Great! Looks like it’s finding what we’re expecting. Let’s move on to the next step.</p>\n<p>Step 2: Apply a transformation and replace the code\nTo figure out how to represent our target code, we’ll go back to the AST explorer. This time, our input will be our desired code.</p>\n<p>Screenshot of input and output</p>\n<p>&#x3C; TODO: screenshot ></p>\n<p>Again, our output is a VariableDeclaration of <code class=\"language-text\">const</code> kind with a VariableDeclarator, but the VariableDeclarator subtree is different. As the id, instead of the name of the variable, we have an ObjectPattern to represent a JavaScript Object. Inside this object, there is a single Property with a key of <code class=\"language-text\">address</code> and a value of <code class=\"language-text\">mailingAddress</code>. As the init, we have a MemberExpression that matches the child MemberExpression from before, which makes sense because the expression to the right of the equals sign in our code is simply <code class=\"language-text\">this.props</code>. </p>\n<p>To build a node with the type ObjectPattern, we’ll need to look at the type definition (link to library) and see what the inputs are. Our object has one property for the one key/value pair that we’re putting in the object. From there, we’ll need the name of the key or the prop name, and the name of the value or the variable name. We can pull these from the instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const variableName = instance.get(&#39;id&#39;).node.name;\nconst propName = instance.get(&#39;init&#39;).node.property.name;</code></pre></div>\n<p>We can insert these into inputs into our Object Pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">        j.objectPattern(\n          [\n            j.property(&#39;init&#39;, j.identifier(propName), j.identifier(variableName)),\n          ],\n        ),</code></pre></div>\n<p>Next we’ll build the Member Expression by looking at the type and seeing what the inputs are. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">        j.memberExpression(\n          j.thisExpression(),\n          j.identifier(&#39;props&#39;),\n          false,\n        )</code></pre></div>\n<p>Combining these, we get our replace step:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  instances.forEach(instance =&gt; {\n    const variableName = instance.get(&#39;id&#39;).node.name;\n    const propName = instance.get(&#39;init&#39;).node.property.name;\n    j(instance).replaceWith(\n      j.variableDeclarator(\n        j.objectPattern(\n          [\n            j.property(&#39;init&#39;, j.identifier(propName), j.identifier(variableName)),\n          ],\n        ),\n        j.memberExpression(\n          j.thisExpression(),\n          j.identifier(&#39;props&#39;),\n          false,\n        )\n      )\n    )\n  });</code></pre></div>\n<p>Let’s run our codemod on our test component again and see what happens:</p>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ExampleComponent extends React.Component {\n  // other interesting behavior\n  render() {\n    const {\n      address: mailingAddress\n    } = this.props;\n    return (\n      &lt;&gt;\n        // render other components\n        &lt;AddressDisplay address={address} /&gt;\n      &lt;/&gt;\n    );\n  }\n}</code></pre></div>\n<p>It’s <em>almost</em> what we expect, but there are line breaks inside the object. Upon digging into the recast library that js-codeshift uses to print, it looks like line breaks are built in to the object pattern. </p>\n<p>Additionally, if we have a case where the variable name and prop name are the same, ESLint will complain further that we can use the object shorthand syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const { address: address } = this props; // Angry ESLint\nconst { address } = this.props; // Happy ESLint</code></pre></div>\n<p>Fortunately, both of these issues can be fixed with ESLint’s auto-fix feature. The shorthand error can also be addressed by extending our codemod — the ObjectPattern type accepts a shorthand parameter that applies if the variable name and prop name are the same. However, since we’ll be using the ESLint auto-fix feature anyway, I’d prefer to just let ESLint fix it for us.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">insert eslint auto-fix command</code></pre></div>\n<p>Lastly, let’s run this command for all of our components! We can achieve this by combining the find and xargs shell commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">include script to auto-fix linking errors as well\nfind frontend/javascripts/components -type f | xargs jscodeshift -t &quot;~/path/to/codemod.js&quot;</code></pre></div>\n<p>There you go! It’s definitely a process that involves a lot of trial and error, console logging, and back and forth between the codemod and the AST explorer, but it can end up being more efficient and saving more time than manually applying a transformation.</p>\n<p>Note: I’m aware that my codemod doesn’t group destructuring variables well, that is, variable declared on multiple lines from the same object will not be grouped into one. </p>\n<p>Some tips for debugging</p>\n<ul>\n<li><code class=\"language-text\">console.log</code> is your friend! I haven’t found a way to get a debugger (if you know a way, please let me know!), so I’ve been relying heavily on logging at every step to verify the behavior. Logging <code class=\"language-text\">Object.keys</code> and <code class=\"language-text\">Object.entries</code> has been especially useful in seeing all the available properties.</li>\n<li>Use the AST explorer! Writing codemods would be almost impossible without some way of visualizing code as an AST.</li>\n<li>When you’re at the replace step, ensure that you’re passing in the correct arguments to the node types that you’re building. You can look at the type definitions in the <code class=\"language-text\">ast-types</code> repo for all the type annotations.</li>\n<li>Make sure you are using the correct parser. We use Flow in our JavaScript so I include <code class=\"language-text\">parser=flow</code> in all my <code class=\"language-text\">jscodeshift</code> commands.</li>\n<li>Lastly, look at existing codemods, there are some great examples in the <code class=\"language-text\">react-codemod</code> library. If you’re looking to apply a transformation, check online to see if someone has already written something similar. </li>\n</ul>\n<p>And here’s the codemod in its entirety:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = function(file, api) {\n  const j = api.jscodeshift;\n  const root = j(file.source);\n\n  // Step 1: Find all instances of the code to change\n  const instances = root.find(j.VariableDeclarator, {\n    id: {\n      type: &#39;Identifier&#39;,\n    },\n    init: {\n      object: {\n        type: &#39;MemberExpression&#39;,\n        object: {\n          type: &#39;ThisExpression&#39;,\n        },\n        property: {\n          name: &#39;props&#39;,\n        },\n      },\n      property: {\n        type: &#39;Identifier&#39;,\n      },\n    },\n  });\n\n  // Step 2: Apply a code transformation and replace the code\n  instances.forEach(instance =&gt; {\n    const variableName = instance.get(&#39;id&#39;).node.name;\n    const propName = instance.get(&#39;init&#39;).node.property.name;\n    j(instance).replaceWith(\n      j.variableDeclarator(\n        j.objectPattern(\n          [\n            j.property(&#39;init&#39;, j.identifier(propName), j.identifier(variableName)),\n          ],\n        ),\n        j.memberExpression(\n          j.thisExpression(),\n          j.identifier(&#39;props&#39;),\n          false,\n        )\n      )\n    )\n  });\n}</code></pre></div>","fields":{"tagSlugs":["/tags/java-script/","/tags/codemods/"]},"frontmatter":{"title":"Getting Started with Codemods in JavaScript","tags":["JavaScript","Codemods"],"date":"2019-07-05","description":"TBD"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/getting-started-with-codemods-in-javascript/"}}